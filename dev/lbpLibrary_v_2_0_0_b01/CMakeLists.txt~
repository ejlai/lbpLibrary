## QUEETECH LBP LIBRARY - MAIN CMAKE FILE 
## 
## author : Ing. Petr Neduchal

cmake_minimum_required(VERSION 2.8)

# Project name
PROJECT(QUEETECH_LbpLibrary)

# The version number.
set (QUEETECH_LbpLibrary_VERSION_MAJOR 2)
set (QUEETECH_LbpLibrary_VERSION_MINOR 0)
set (QUEETECH_LbpLibrary_VERSION_PATCH 1)

configure_file (
  "${PROJECT_SOURCE_DIR}/lbp_constants.h.in"
  "${PROJECT_BINARY_DIR}/lbp_constants.h"
  )

include_directories("${PROJECT_BINARY_DIR}")

# Option Build LbpLibrary MAIN MODULE
option (LBPLIB_BUILD
        "Build Main module of LbpLibrary" ON)

# Option Build LbpLibrary 3D MODULE
option (LBPLIB_BUILD_3D
        "Build Realtime LbpLibrary" ON)          
        
# Option Build Queetech database engine
option (LBPLIB_BUILD_DB 
        "Build LbpLibrary Texture database engine" OFF) 
        
# Option Add Boost support 
option (LBPLIB_ADD_BOOST
        "Add Boost support " OFF)     

# Build Realtime LbpLibrary
if(LBPLIB_BUILD_REALTIME)  
	add_subdirectory(lbp)
	message("Main module was configured.")
ENDIF(LBPLIB_BUILD_REALTIME)   

# Build Realtime LbpLibrary
if(LBPLIB_BUILD_3D)  
	add_subdirectory(lbp_3d)
	message("3D Module was configured.")
ENDIF(LBPLIB_BUILD_3D)   

# Build LbpLibrary Texture database engine
if(LBPLIB_BUILD_DB)  
	add_subdirectory(lbp_db)
ENDIF(LBPLIB_BUILD_DB )                            
        
#CONFIGURE_FILE(python/lbpLibrary.py.temp  python/lbpLibrary.py ${DYNLIB})
#CONFIGURE_FILE(matlab/loadLbpLibrary.m.temp  matlab/loadLbpLibrary.m ${DYNLIB})
#FILE(COPY lbp.h matlab/imageToLbp.m matlab/realTimeLbp.m matlab/unloadLbpLibrary.m DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/matlab/)
#FILE(COPY img/lena.bmp DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/img/)


				 
