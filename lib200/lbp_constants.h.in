/**
 \file lbp_constants.h
 \details File contain main constans for whole Queetech LBP libary.
 \author Petr Neduchal
 \date 2013
 */

/* ========================================================================= */

#ifndef __lbp_constants_h
#define __lbp_constants_h

#include <iostream>
#include <cmath>
#include <string>

/* ========================================================================= */

#define CHECK_VERSION_SIMPLE                                      0
#define CHECK_VERSION_COMPLETE                                    1


using namespace std;

/* ========================================================================= */

namespace queetech 
{

/* ========================================================================= */
    
  namespace lbplib 
  {

    const char* PROJECT_NAME = "Queetech LBP Library";

    // version Queetech LBP libary
    class Version 
    {
      
    public :
      /* ------------------------------------------------------------------- */
      
      static const int MAJOR = @QUEETECH_LbpLibrary_VERSION_MAJOR@ ;
      static const int MINOR = @QUEETECH_LbpLibrary_VERSION_MINOR@ ;
      static const int PATCH = @QUEETECH_LbpLibrary_VERSION_PATCH@ ;

      Version() {}
      ~Version() {}
      /* ------------------------------------------------------------------- */

      /**
       * \fn check(int req_major, int req_minor, int req_patch, char option)
       *
       * \brief Function checks the version of LbpLibrary.
       * \param req_major - Major version of library X.*.*
       * \param req_minor - Minor version of library *.X.*
       * \param req_patch - Patch version of library *.*.X
       * \param option - CHECK_VERSION_SIMPLE | CHECK_VERSION_COMPLETE
       * \return 0 or 1 for CHECK_VERSION_SIMPLE and
                 for CHECK_VERSION_Complete :
                      0 - required version is correct.
                      1 - required version is higher than using version.
                     -1 - required version is lower than usung version.
      */ 
      static int check(int req_major, int req_minor, int req_patch, char option)
      {
        switch(option) 
        {    
          case 0 : return ((req_major == Version::MAJOR)&&
                           (req_minor == Version::MINOR)&&
                           (req_patch == Version::PATCH));
          case 1 : int ver = Version::MAJOR * 10000 + 
                             Version::MINOR * 100 +                                              
                             Version::PATCH;
                   int req_ver = req_major * 10000 + 
                                 req_minor * 100 +                                              
                                 req_patch;
                   if((req_ver - ver) == 0) return 0;                  
                   else return 
                           (int)((req_ver-ver)*abs(1.0/(double)(ver-req_ver)));       
                   
        }        
        return 0;
      }  
      /* ------------------------------------------------------------------- */
    };

  };

/* ========================================================================= */

};

/* ========================================================================= */

#endif

/* ========================================================================= */
