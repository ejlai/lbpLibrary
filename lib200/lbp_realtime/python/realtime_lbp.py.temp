"""@package realtime LBP

 verison 0.6.0
 Author : Petr Neduchal
 Date : 2013-2014
"""

import numpy as np
import ctypes

# Function loads dynamic library
def loadRealtimeLbpLibrary() :
    """Function loads LBP library

			 RealtimeLbp.dll/libRealtimeLbp.so (win/lin)
    """
    lbplib = ctypes.cdll.LoadLibrary("${DYNLIB}")
    return lbplib
 
def realTimeLbp1x8(lbplib, npIM) :
    """Function calls extern function realTimeLbpImNp

	Params : lbplib - library pointer (see loadLbpLibrary)
                 npIM - NumPy matrix
    """
    w = npIM.shape[0]
    h = npIM.shape[1]
    img = (ctypes.c_long * (w*h))()
    res = (ctypes.c_long * 256)()
    for i in range(w) :
        for j in range(h) :
            img[(w*i) + j] = npIM[i,j]
    lbplib.realTimeLbp(w,h,ctypes.byref(img), ctypes.byref(res))
    res2 = zeros([1, 256], dtype = np.int32)
    for i in range(256)
      res2[i] = res[i]
    return res2

def realTimeLbp2x8(lbplib, npIM) :
    """Function calls extern function realTimeLbpImNp

	Params : lbplib - library pointer (see loadLbpLibrary)
                 npIM - NumPy matrix
    """
    w = npIM.shape[0]
    h = npIM.shape[1]
    img = (ctypes.c_long * (w*h))()
    res = (ctypes.c_long * 256)()
    for i in range(w) :
        for j in range(h) :
            img[(w*i) + j] = npIM[i,j]
    lbplib.realTimeLbp2x8(w,h,ctypes.byref(img), ctypes.byref(res))
    res2 = zeros([1, 256], dtype = np.int32)
    for i in range(256)
      res2[i] = res[i]
    return res2

def realTimeLbp3x10(lbplib, npIM) :
    """Function calls extern function realTimeLbpImNp

	Params : lbplib - library pointer (see loadLbpLibrary)
                 npIM - NumPy matrix
    """
    w = npIM.shape[0]
    h = npIM.shape[1]
    img = (ctypes.c_long * (w*h))()
    res = (ctypes.c_long * 1024)()
    for i in range(w) :
        for j in range(h) :
            img[(w*i) + j] = npIM[i,j]
    lbplib.realTimeLbp3x10(w,h,ctypes.byref(img), ctypes.byref(res))
    res2 = zeros([1, 1024], dtype = np.int32)
    for i in range(1024)
      res2[i] = res[i]
    return res2

def realTimeLbp4x12(lbplib, npIM) :
    """Function calls extern function realTimeLbpImNp

	Params : lbplib - library pointer (see loadLbpLibrary)
                 npIM - NumPy matrix
    """
    w = npIM.shape[0]
    h = npIM.shape[1]
    img = (ctypes.c_long * (w*h))()
    res = (ctypes.c_long * 4096)()
    for i in range(w) :
        for j in range(h) :
            img[(w*i) + j] = npIM[i,j]
    lbplib.realTimeLbp3x10(w,h,ctypes.byref(img), ctypes.byref(res))
    res2 = zeros([1, 4096], dtype = np.int32)
    for i in range(4096)
      res2[i] = res[i]
    return res2

#def uniformLbp(lbplib, npHist):
 
#def rotationMinLbp(lbplib, nphist):   

def lbp2Hists(lbplib, npIM)
    """
		TODO : zkontrolovat co tahle funkce presne dela vzhledem k dynlib
	Function calls extern function realTimeLbpImNp

	Params : lbplib - library pointer (see loadLbpLibrary)
                 npIM - NumPy matrix
    """
    w = npIM.shape[0]
    h = npIM.shape[1]
    img = (ctypes.c_long * (w*h))()
    res = (ctypes.c_long * (w*h))()
    for i in range(w) :
        for j in range(h) :
            img[(w*i) + j] = npIM[i,j]
    lbplib.lbp2Hists(w,h,ctypes.byref(img), ctypes.byref(res))
    for i in range(w) :
        for j in range(h) :
            res2[i,j] = res[(w*i) + j]
    return res2
