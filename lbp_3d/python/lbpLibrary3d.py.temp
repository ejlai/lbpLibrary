#! /usr/bin/python
# -*- coding: utf-8 -*-

"""
Hlavní soubor pySlam
---------------------

"""

# import funkcí
import sys
import os.path
import numpy as np
import math
import ctypes
import scipy

def loadLibrary() :
    """Function loads LBP library

			 RealtimeLbp.dll/libRealtimeLbp.so (win/lin)
    """
    lbplib = ctypes.cdll.LoadLibrary("${DYNLIB}")
    return lbplib	
	
def compute(lbplib, npIM, N, mask, radius):
		s = npIM.shape[0]
		r = npIM.shape[1]
		c = npIM.shape[2]    
		img = (ctypes.c_long * (r*c*s))()
		res = (ctypes.c_long * (int)(math.pow(2,N)))()
		maskPoints = (ctypes.c_long * (N * 8))()
		maskCoef = (ctypes.c_double * (N * 8))()  
		maskP = mask['mask'] 
		maskC = mask['maskCoef']

		for i in range(N*8):
			maskPoints[i] = (int)(maskP[i])
			maskCoef[i] = maskC[i]
		for i in range(s) :
			for j in range(r) :
				for k in range(c) :
					img[(r*c*i) + (c*j) + k] = npIM[i,j,k]
		lbplib.lbp3dCxx(r,c,s, ctypes.byref(maskPoints), ctypes.byref(maskCoef), N, (int)(mask['center']), radius, ctypes.byref(img), ctypes.byref(res))
		res2 = np.zeros([(int)(math.pow(2,N)), 1], dtype = np.int32)
		for i in range((int)(math.pow(2,N))):
			res2[i] = res[i]
		return res2


	









